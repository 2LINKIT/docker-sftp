#!/bin/bash
set -Eeo pipefail

# shellcheck disable=2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

reArgsMaybe="^[^:[:space:]]+:.*$" # Smallest indication of attempt to use argument
reArgSkip='^([[:blank:]]*#.*|[[:blank:]]*)$' # comment or empty line

# Paths
userConfPath="/etc/sftp/users.conf"
userConfPathLegacy="/etc/sftp-users.conf"
userConfFinalPath="/var/run/sftp/users.conf"

function log() {
    echo "[$0] $*" >&2
}

# Allow running other programs, e.g. bash
if [[ -z "$1" || "$1" =~ $reArgsMaybe ]]; then
    startSshd=true
else
    startSshd=false
fi

# Backward compatibility with legacy config path
if [ ! -e "$userConfPath" ] && [ -e "$userConfPathLegacy" ]; then
    mkdir -p "$(dirname $userConfPath)"
    ln -s "$userConfPathLegacy" "$userConfPath"
fi

# Create users only on first run
if [ ! -e "$userConfFinalPath" ]; then
    mkdir -p "$(dirname $userConfFinalPath)"

    if [ -e "$userConfPath" ]; then
        # Append mounted config to final config
        grep -v -E "$reArgSkip" < "$userConfPath" > "$userConfFinalPath"
    fi

    if $startSshd; then
        # Append users from arguments to final config
        for user in "$@"; do
            echo "$user" >> "$userConfFinalPath"
        done
    fi

    if [ -n "$SFTP_USERS" ]; then
        # Append users from environment variable to final config
        IFS=" " read -r -a usersFromEnv <<< "$SFTP_USERS"
        for user in "${usersFromEnv[@]}"; do
            echo "$user" >> "$userConfFinalPath"
        done
    fi

    #make sure staff group exists
    groupadd --gid "50" "staff" || true

    # Check that we have users in config
    if [ -e "$userConfFinalPath" ] && [ "$(wc -l < "$userConfFinalPath")" -gt 0 ]; then
        # Import users from final conf file
        while IFS= read -r user || [[ -n "$user" ]]; do
            create-sftp-user "$user"
        done < "$userConfFinalPath"
    elif $startSshd; then
        log "FATAL: No users provided!"
        exit 3
    fi

    # copy in host keys if mapped
    if [ -d "/etc/sftp/host_keys.d" ]; then
        log "/etc/sftp/host_keys.d is mapped"
        for keyFile in "/etc/sftp/host_keys.d"/*; do
            #The guard ensures that if there are no matching files, the loop will exit without trying to process a non-existent file
            [ -f "$keyFile" ] || break
            cp "$keyFile" /etc/ssh
            # set perms
            baseFile=$(basename $keyFile)
            chmod 600 "/etc/ssh/$baseFile"
            log "HOST KEY added ${keyFile} to /etc/ssh/$baseFile"
        done
    else
        ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ''
        ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ''
    fi

fi

# Source custom scripts, if any
if [ -d /etc/sftp.d ]; then
    for f in /etc/sftp.d/*; do
        if [ -x "$f" ]; then
            log "Running $f ..."
            $f
        else
            log "Could not run $f, because it's missing execute permission (+x)."
        fi
    done
    unset f
fi

# Fail2ban
if [ "$FAIL2BAN" ] && [ "$FAIL2BAN" = false ]; then
    log "FAIL2BAN is has been set to disabled"
else
    touch /var/log/auth.log
    service fail2ban start
fi


if $startSshd; then
    #log "Executing sshd"
    #exec /usr/sbin/sshd -D -e
    #tail -f /var/log/auth.log
    
    # Morten Knudsen: log "Executing supervisord with sshd"
    # Morten Knudsen: mkdir -p /var/log/supervisor
    # Morten Knudsen: /usr/bin/supervisord -c /etc/supervisor/supervisord.conf

    # Added by Morten Knudsen
    log "Starting rsyslogd"
    mkdir -m2755 -p /sftp/data/dev
    exec /usr/sbin/rsyslogd -n &
    log "Starting sshd"
    exec /usr/sbin/sshd -D -e    
else
    log "Executing custom startup $*"
    exec "$@"
fi

#!/bin/bash
set -Eeo pipefail

# shellcheck disable=2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Extended regular expression (ERE) for arguments
reUser='[A-Za-z0-9._][A-Za-z0-9._-]{0,31}' # POSIX.1-2008
rePass='[^:]{0,255}'
reUid='[[:digit:]]*'
reGid='[[:digit:]]*'
reDir='[^:]*'
#reArgs="^($reUser)(:$rePass)(:e)?(:$reUid)?(:$reGid)?(:$reDir)?$"

function log() {
    echo "[$0] $*"
}

function validateArg() {
    name="$1"
    val="$2"
    re="$3"

    if [[ "$val" =~ ^$re$ ]]; then
        return 0
    else
        log "ERROR: Invalid $name \"$val\", do not match required regex pattern: $re"
        return 1
    fi
}

# log "Parsing user data: \"$1\""
IFS=':' read -ra args <<< "$1"

skipIndex=0
chpasswdOptions=""
useraddOptions=(--no-user-group)

user="${args[0]}"; validateArg "username" "$user" "$reUser" || exit 1
pass="${args[1]}"; validateArg "password" "$pass" "$rePass" || exit 1

if [ "${args[2]}" == "e" ]; then
    chpasswdOptions="-e"
    skipIndex=1
fi

uid="${args[$((skipIndex+2))]}"; validateArg "UID" "$uid" "$reUid" || exit 1
gid="${args[$((skipIndex+3))]}"; # validateArg "GID" "$gid" "$reGid" || exit 1
dir="${args[$((skipIndex+4))]}"; validateArg "dirs" "$dir" "$reDir" || exit 1

if getent passwd "$user" > /dev/null; then
    log "WARNING: User \"$user\" already exists. Skipping."
    exit 0
fi

if [ -n "$uid" ]; then
    useraddOptions+=(--non-unique --uid "$uid")
fi

if [ -n "$gid" ]; then
    #if gid = admin then its old ubuntu lingo and new group should be sudo, change it
    [ "$gid" = "admin" ] && gid="staff" && log "'admin' group reclassed as 'staff'. use numeric gid to force admin"
    # check if it exists
    if ! getent group "$gid" > /dev/null; then
        log "group $gid does not exists. Creating it"
        if [[ "$gid" =~ ^[0-9]+$ ]]; then
            # its a digit
            groupadd --gid "$gid" "group_$gid"
        else
            groupadd "$gid"
            #gid="$(cut -d: -f3 < <(getent group $gid))"
        fi
    fi
    #ensure we are workign with the id
    grp_id="$(cut -d: -f3 < <(getent group $gid))"
    gid=$grp_id
    #log "group $gid has grp_id $grp_id"
    # useraddOptions+=(--gid "$gid")

else
    log "no group specified, defaulting to 100:users"
    gid=100
fi

useraddOptions+=(--gid "$gid")

log "useradd ${useraddOptions[@]} $user"
useradd "${useraddOptions[@]}" "$user"

# locked down chroot setup where user's home is owned by root
mkdir -p "/home/$user"
chown root:root "/home/$user"
chmod 755 "/home/$user"

# Retrieving user id to use it in chown commands instead of the user name
# to avoid problems on alpine when the user name contains a '.'
uid="$(id -u "$user")"
log "uid is $uid"

if [ -n "$pass" ]; then
    echo "$user:$pass" | chpasswd $chpasswdOptions
else
    usermod -p "*" "$user" # disabled password
fi

# Add SSH keys to authorized_keys with valid permissions
if [ -d "/home/$user/.ssh/keys" ]; then
    for publickey in "/home/$user/.ssh/keys"/*; do
        (cat "${publickey}"; echo) >> "/home/$user/.ssh/authorized_keys"
    done
    chown "$uid" "/home/$user/.ssh/authorized_keys"
    chmod 600 "/home/$user/.ssh/authorized_keys"
fi

# Make sure dirs exists
if [ -n "$dir" ]; then
    IFS=',' read -ra dirArgs <<< "$dir"
    for dirPath in "${dirArgs[@]}"; do
        dirPath="/home/$user/$dirPath"
        if [ ! -d "$dirPath" ]; then
            log "Creating directory: $dirPath"
            mkdir -p "$dirPath"
            chown -R "$uid:$gid" "$dirPath"
        else
            log "Directory already exists: $dirPath"
        fi
    done
fi

###### MODS for bind mounts #####

# if DATA_DIR_NAME env is not set then make data the default
: ${DATA_MOUNT_NAME:=data}
# mount user dir
dataPath="/data"
usersDir="$dataPath/users"
userDataDir="$usersDir/$user"
homeDataDir="/home/$user/$DATA_MOUNT_NAME"

# always create a data dir by default in the users home.
if [ ! -d "$homeDataDir" ]; then
    log "- mkdir -p $homeDataDir"
    mkdir -p "$homeDataDir"
    chown -R "$uid:$gid" "$homeDataDir"
fi
#mod user so the data dir is their home
usermod -d "$homeDataDir" "$user"

#if the data path has been mapped in as volume then it will exists and do our special logic
if [ -d "$dataPath" ]; then
    log "data path has been mapped in as a volume"
    # create users dir
    if [ ! -d "$usersDir" ]; then
        log "- no $usersDir so exec: mkdir -p $usersDir"
        mkdir -p "$usersDir"
        chown :staff "$usersDir"
        chmod 775 "$usersDir"
    fi

    # create users data dir
    if [ ! -d "$userDataDir" ]; then
        log "- mkdir -p $userDataDir"
        mkdir -p "$userDataDir"
        chown $user:users "$userDataDir"
        chmod 775 "$userDataDir"
    fi

    # for users mount the ($userDataDir) directory
    if [ "$gid" = "100" ] || [ "$gid" = "users" ]; then
        log "- mount --bind $userDataDir $homeDataDir"
        mount --bind "$userDataDir" "$homeDataDir"
    fi
    # for (50) staff/admins mount the data directory
    if [ "$gid" = "50" ] || [ "$gid" = "staff" ]; then
        # chown -R :100 "$userDataDir"
        mount --bind "$dataPath" "$homeDataDir"
        #also make sure that sudo/admins are assigned to the users group
        usermod -g users "$user"
        usermod -a -G 50 "$user"
    fi
fi


#!/bin/bash
set -Eeo pipefail

# shellcheck disable=2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Extended regular expression (ERE) for arguments
reUser='[A-Za-z0-9._][A-Za-z0-9._-]{0,31}' # POSIX.1-2008
rePass='[^:]{0,255}'
reUid='[[:digit:]]*'
reGid='[[:digit:]]*'
reDir='[^:]*'
#reArgs="^($reUser)(:$rePass)(:e)?(:$reUid)?(:$reGid)?(:$reDir)?$"

function log() {
    echo "[$0] $*"
}

function validateArg() {
    name="$1"
    val="$2"
    re="$3"

    if [[ "$val" =~ ^$re$ ]]; then
        return 0
    else
        log "ERROR: Invalid $name \"$val\", do not match required regex pattern: $re"
        return 1
    fi
}

# log "Parsing user data: \"$1\""
IFS=':' read -ra args <<< "$1"

skipIndex=0
chpasswdOptions=""
useraddOptions=(--no-user-group)

user="${args[0]}"; validateArg "username" "$user" "$reUser" || exit 1
pass="${args[1]}"; validateArg "password" "$pass" "$rePass" || exit 1

if [ "${args[2]}" == "e" ]; then
    chpasswdOptions="-e"
    skipIndex=1
fi

uid="${args[$((skipIndex+2))]}"; validateArg "UID" "$uid" "$reUid" || exit 1
gid="${args[$((skipIndex+3))]}"; # validateArg "GID" "$gid" "$reGid" || exit 1
dir="${args[$((skipIndex+4))]}"; validateArg "dirs" "$dir" "$reDir" || exit 1

if getent passwd "$user" > /dev/null; then
    log "WARNING: User \"$user\" already exists. Skipping."
    exit 0
fi

if [ -n "$uid" ]; then
    useraddOptions+=(--non-unique --uid "$uid")
fi

if [ -n "$gid" ]; then
    [ "$gid" = "owner" ] && gid="staff"
    
    # check if it exists
    if ! getent group "$gid" > /dev/null; then
        log "group $gid does not exists. Creating it"
        if [[ "$gid" =~ ^[0-9]+$ ]]; then
            # its a digit
            groupadd --gid "$gid" "group_$gid"
        else
            groupadd "$gid"
            #gid="$(cut -d: -f3 < <(getent group $gid))"
        fi
    fi
    #ensure we are workign with the id
    grp_id="$(cut -d: -f3 < <(getent group $gid))"
    gid=$grp_id
    #log "group $gid has grp_id $grp_id"
    # useraddOptions+=(--gid "$gid")

else
    log "no group specified, defaulting to 100:users"
    gid=100
fi

useraddOptions+=(--gid "$gid")

log "useradd ${useraddOptions[@]} $user"
useradd "${useraddOptions[@]}" "$user"

# locked down chroot setup where user's home is owned by root
mkdir -p "/home/$user"
chown root:root "/home/$user"
chmod 755 "/home/$user"

# Retrieving user id to use it in chown commands instead of the user name
# to avoid problems on alpine when the user name contains a '.'
uid="$(id -u "$user")"
log "uid is $uid"

if [ -n "$pass" ]; then
    echo "$user:$pass" | chpasswd $chpasswdOptions
else
    usermod -p "*" "$user" # disabled password
fi

# Add SSH keys to authorized_keys with valid permissions
if [ -d "/home/$user/.ssh/keys" ]; then
    mkdir -p /home/$user/.ssh
    for publickey in "/home/$user/.ssh/keys"/*; do
        (cat "${publickey}"; echo) >> "/home/$user/.ssh/authorized_keys"
    done
fi

# Add SSH keys from mapped dir, files should be in format $user_rsa.pub
if [ -d "/etc/sftp/authorized_keys.d" ]; then
    for keyFile in "/etc/sftp/authorized_keys.d"/*.pub; do
        #The guard ensures that if there are no matching files, the loop will exit without trying to process a non-existent file
        [ -f "$keyFile" ] || break
        baseFile=$(basename $keyFile)
        #if it does not have a _ char then continue
        [[ $baseFile != *_* ]] && continue
        # strip everything from beginning to first occurrence of '_'
        userName="${baseFile%%_*}"
        # log "${keyFile} has $userName while processing $user"
        if [ "$userName" = "$user" ]; then
            mkdir -p /home/$user/.ssh
            log "adding ${keyFile} to /home/$user/.ssh/authorized_keys"
            (cat "${keyFile}"; echo) >> "/home/$user/.ssh/authorized_keys"
        fi
    done
fi

if [ -e "/home/$user/.ssh/authorized_keys" ]; then
    log "set proper permissions on /home/$user/.ssh/authorized_keys"
    chown "$uid" "/home/$user/.ssh"
    chmod 700 "/home/$user/.ssh"
    chown "$uid" "/home/$user/.ssh/authorized_keys"
    chmod 644 "/home/$user/.ssh/authorized_keys"
fi

# do default home mount that user can read/write to. Chroot does not allow writing to normal home
: ${HOME_MOUNT_NAME:=home}
homeMountDir="/home/$user/$HOME_MOUNT_NAME"

 # always create a data dir by default in the users home.
if [ ! -d "$homeMountDir" ]; then
    log "- mkdir -p $homeMountDir"
    mkdir -p "$homeMountDir"
    chown -R "$uid:$gid" "$homeMountDir"
fi

#### do the special DATA_MOUNT logic
#
## if DATA_MOUNT is set and dir exists 
if [ "$DATA_MOUNT" ] && [ -d "$DATA_MOUNT" ]; then
    hasDataMount=true
    dataHomeDir="$DATA_MOUNT/home"
    userDataDir="$dataHomeDir/$user"
    dataMountDir="/home/$user/$DATA_MOUNT"

    log "data path has been mapped in as a volume"
    # create home dir in data
    if [ ! -d "$dataHomeDir" ]; then
        log "- no $dataHomeDir so exec: mkdir -p $dataHomeDir"
        mkdir -p "$dataHomeDir"
        chown :staff "$dataHomeDir"
        chmod 775 "$dataHomeDir"
    fi

    # create users in data home dir if its not there
    if [ ! -d "$userDataDir" ]; then
        log "- mkdir -p $userDataDir"
        mkdir -p "$userDataDir"
        chown $user:users "$userDataDir"
        chmod 775 "$userDataDir"
    fi

    # mount the home/:user dir
    log "- mount --bind $userDataDir $homeMountDir"
    mount --bind "$userDataDir" "$homeMountDir"
    # for users mount the ($userDataDir) directory
    if [ "$gid" = "100" ] || [ "$gid" = "users" ]; then
        log "- mount --bind $userDataDir $homeMountDir"
        mount --bind "$userDataDir" "$homeMountDir"
    fi
    # for (50) staff/admins mount the data directory
    if [ "$gid" = "50" ] || [ "$gid" = "staff" ]; then
        log "- mkdir -p $dataMountDir"
        mkdir -p "$dataMountDir"
        chown -R "$uid:$gid" "$dataMountDir"
        mount --bind "$DATA_MOUNT" "$dataMountDir"

        #also make sure that staff are assigned to the users groups
        usermod -g users "$user"
        usermod -a -G 50 "$user"
    fi

fi

# Make sure dirs exists
if [ -n "$dir" ]; then
    IFS=',' read -ra dirArgs <<< "$dir"
    for dirPath in "${dirArgs[@]}"; do
        homePath="/home/$user/$dirPath"
        if [ ! -d "$homePath" ]; then
            log "Creating directory: $homePath"
            mkdir -p "$homePath"
            chown -R "$uid:$gid" "$homePath"
            # if using bind mount logic then
            if [ "$hasDataMount" = true ]; then
                if [ -d "$homePath" ]; then
                    mount --bind "$dirPath" "$homePath"
                else
                    log "!!!! ERROR users must be misconfigured. $dirPath does not exist "
                fi
            fi
        else
            log "Directory already exists: $dirPath"
        fi
    done
fi

#-----------------------------------------------------------------------
# Added by Morten Knudsen
mkdir -p /sftp/

chown root:root /sftp
chmod -R 755 /sftp/
#-----------------------------------------------------------------------
mkdir -p /sftp/dev

chown root:root /sftp/dev
chmod -R 755 /sftp/dev
